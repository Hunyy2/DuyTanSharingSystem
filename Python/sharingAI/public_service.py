from typing import AsyncIterator, Dict, List
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from config import GOOGLE_API_KEY_QUERY
import logging

logger = logging.getLogger(__name__)


class PublicQueryProcessor:
    def __init__(self):
        self.sql_llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash",
            google_api_key=GOOGLE_API_KEY_QUERY,
            temperature=0.5,
            max_output_tokens=2024,
            disable_streaming=False,  # Bật streaming
        )

    async def _stream_response(
        self,
        question: str,
        chat_history: List[Dict],
    ) -> AsyncIterator[str]:
        """Streams the response from the LLM, using table_configs to guide column display."""
        use_chat_history = chat_history and any(
            msg.get("content") for msg in chat_history
        )
        logger.info(f"Using chat history: {use_chat_history}")
        full_response_for_logging = ""

        template = """
        Bạn là một trợ lý AI thân thiện giúp giải quyết các câu hỏi của người dùng : Câu hỏi của người dùng là :{question}
        **Đoạn mô tả dự án giúp bạn xác định được cách trả lời cho cau hỏi từ người dùng {{question}} chứ không phải là một nội dung cần bạn trả lời**
        --Mô tả dự án của tôi
            Trang web được thiết kế để tạo ra một nền tảng giao tiếp và chia sẻ thông tin giữa các sinh viên đại học—một mạng xã hội dành riêng cho sinh viên. Nền tảng này có thể phục vụ nhiều mục đích, chẳng hạn như:
            Chia sẻ thông tin về phương tiện đi lại: Sinh viên có thể đăng thông báo về việc đi lại từ điểm A đến điểm B để tìm bạn đi chung xe, giúp tiết kiệm chi phí và tăng cường kết nối.
            Chia sẻ tài liệu học tập: Sinh viên có tài liệu học tập còn thừa sau khi hoàn thành khóa học có thể bán hoặc chia sẻ chúng với những người khác có nhu cầu.
            Đăng, bình luận, thích và chia sẻ: Tương tự như cách thức hoạt động của mạng xã hôi.
            Nhắn tin và trò chuyện: Cho phép sinh viên giao tiếp với nhau giống như mạng xã hôi.
        **Và bạn chính là AI thân thiện hỗ trợ người dùng trong dự án của tôi**
        -Hãy trả lời chính xác và đầy đủ thông tin.
        -Kết hợp với dữ liệu có được trên Google để tìm kiếm thông tim chính xác.
        - Luôn luôn kết hợp với các Icon trong câu trả lời.
        - Nếu câu hỏi nào khó quá hoặc không có trong dữ liệu của bạn,bãn có thể trả lời "Xin lỗi nha,nhưng tôi không được huấn luyện để trả lời câu hỏi này của bạn  + icon thân thiện".
        
        """
        prompt = PromptTemplate(
            input_variables=["chat_history", "question"],
            template=template.strip(),
        )

        chain = prompt | self.sql_llm

        response_stream = chain.astream(
            {
                "question": question,
                "chat_history": chat_history or "Không có lịch sử trò chuyện.",
            }
        )

        logger.info("Starting to receive chunks from LLM stream...")

        try:
            async for chunk in response_stream:
                content = getattr(chunk, "content", str(chunk))
                if content:
                    full_response_for_logging += content
                    logger.info(f"Yielding raw chunk: '{content}'")
                    yield content

            logger.info("Finished streaming response.")
            logger.info(
                f"Full response generated by LLM: '{full_response_for_logging}'"
            )

        except Exception as e:
            logger.error(f"Error during streaming response: {str(e)}", exc_info=True)
            yield "Đã xảy ra lỗi trong quá trình tạo câu trả lời."
